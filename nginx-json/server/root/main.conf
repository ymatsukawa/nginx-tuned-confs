# rate limiting
## rate limiting with burst handling
# limit_req zone=api_rate_limit burst=20 delay=10;
# limit_req_status 429;

## rate limit information headers
add_header 'x-ratelimit-limit' '20' always;
add_header 'x-ratelimit-remaining' '$limit_req_status' always;

# block invasions
## security filtering for common attacks
if ($request_uri ~* "(\.\.\/|\.\.\\|union.*select|insert.*into|update.*set|delete.*from|drop.*table|script.*>|<.*script|javascript:|onerror=|onload=|eval\(|base64,)") {
    return 403;
}

## block suspicious user agents
if ($http_user_agent ~* "(sqlmap|nmap|nikto|dirb|gobuster|wfuzz|burp|zaproxy)") {
    return 403;
}

# proxy backs
## proxy_pass http://127.0.0.1:8080; # use real ip or dns name in production
proxy_pass http://tserver:8080;      # this way is for docker network
proxy_http_version 1.1;
proxy_set_header connection "";
proxy_set_header host $host;
proxy_set_header x-real-ip $remote_addr;
proxy_set_header x-forwarded-for $proxy_add_x_forwarded_for;
proxy_set_header x-forwarded-proto $scheme;

# performance
proxy_request_buffering off;
proxy_socket_keepalive on;
